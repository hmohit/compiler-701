head	1.1;
access;
symbols;
locks
	horwitz:1.1; strict;
comment	@ * @;


1.1
date	2010.11.04.20.41.21;	author horwitz;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@//**********************************************************************
// A LiveRange has the following componentsL
//      unsigned               the register that is defined
//      set<MachineInstr *>    the set of nodes (instructions) in its range
//      int                    register class for the defined reg
//                             -1 if a preg
//      set<LiveRange *>       neighbors in the interference graph
//      int color         0 = no color
//**********************************************************************

#include "llvm/CodeGen/Passes.h"
#include "llvm/CodeGen/MachineFunctionPass.h"
#include "llvm/CodeGen/MachineInstr.h"
#include "llvm/CodeGen/MachineLoopInfo.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/RegAllocRegistry.h"
//#include "llvm/CodeGen/VirtRegMap.h"
#include "llvm/Target/TargetInstrDesc.h"
#include "llvm/Target/TargetInstrInfo.h"
#include "llvm/Target/TargetMachine.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/Compiler.h"
#include "llvm/ADT/Statistic.h"

using namespace std;
using namespace llvm;

class LiveRange {
public:

  // constructor
  LiveRange(unsigned reg, int regClass);

  // public methods
  void addInstr(MachineInstr *);
  void print(map<MachineInstr *, unsigned> InstrToNumMap);
  unsigned getReg();
  set<MachineInstr *> getInstrSet();
  unsigned numNeighbors();
  void addNeighbor(LiveRange *);
  set<LiveRange *> getNeighbors();
  unsigned numUnstackedNeighbors(set<LiveRange *> S);
  void setColor(int);
  int getColor();
  LiveRange *makeCopy();
  bool containsCall();

private:
  unsigned myReg;
  set<MachineInstr *> myRange;
  int myRegClass;
  set<LiveRange *> myNeighbors;
  int myColor;
  bool hasCall;
};
@
